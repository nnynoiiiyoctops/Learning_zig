const expect = @import("std").testing.expect;

//Ну чтож. Поехали. Самый популярный тип данных в Zig. Да, только сейчас

const Point = struct {
    x: f64, //Поля структуры
    y: f64, //Нет, все поля объявляются отдельно
    //Не так как в Go.
};

test "Первая структура" {
    const ZeroPoint: Point = .{ // точка означает что структура - анонимная
        .x = 0.0,
        .y = 0.0, //Нельзя не объявить 1 из полей. При создании переменной
        // ОБЯЗАТЕЛЬНО ОБЪЯВЛЕНИЕ ВСЕХ ПОЛЕЙ
    };

    try expect(@TypeOf(ZeroPoint) == Point);
}

test "Обращение к полям структуры" {
    var SomePoint: Point = Point{
        .x = 10.0,
        .y = 20.0,
    };

    SomePoint.x += 10.0; // Тут произошло обращение к полю структуры
    //К полю x и оно изменилось.
    //Теперь структура выглядит так
    //SomePoint{
    // .x = 20,
    // .y = 20,
    //};
    //Поле Y мы не трогали

    try expect(SomePoint.x == SomePoint.y);
}

//Ну и РАЗУМЕЕТСЯ структуры тоже имеют свои методы

const UwU = struct {
    cute: bool,
    UwU: bool,
    other: u6,

    fn IsCute(self: UwU) bool {
        return self.cute;
    }
}; //1 + 1 + 6 = 8 = u8

test "Тест методов структуры" {
    const cuties: UwU = UwU{
        .cute = true,
        .UwU = false,
        .other = 59,
    };

    try expect(cuties.IsCute());
}
//Комментариев не так много потомучто писать попросту нечего.
//Можно написать про выравнивание и про то как устроенны
//Структуры в C сравнить их. Но я не вижу смыса распинаться
//Всё понятно и ничего нового тут нет
