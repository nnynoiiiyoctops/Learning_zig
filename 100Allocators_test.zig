const expect = @import("std").testing.expect;

//Почему резкий перескок на 100?
//Потомучто в гайжетзавершил главу Language
//Теперь переходим к стандартной библиотеке!)
// Хотел бы отметить такой момент
// Дальше нового синтаксиса д не будет
// Будут только новые функции смысл работы которых надо понимать

//Также я оказался деюилом потому, что в zig всё это время была программа для сборки 1 конкретного файла. Тоесть с её помощью можно было из 1 файла кода получить 1 исполняемый
//zig build-exe file_name.zig

//Лучше поздно чем никогда!)
//Тем не менее. Тесты будут писаться и к ^им просто будет выходить дополнение
//Не все функции поддерживаются в тестахт поэтому да, придётся часть старых тестов поменять, дополнить, но, это не то чтобы трудно, после всех то новостей)

//ВСТУПЛЕНИЕ ВСЁ
//Теперь аллокаторы

const std = @import("std");
const page_allocator = std.heap.page_allocator;

test "Аллокатор" {
    var memory = try page_allocator.alloc(u8, 100);
    //помимо alloc есть resize remap и free
    defer page_allocator.free(memory);

    try expect(memory.len == 100);

    if (page_allocator.resize(memory, 100)) try expect(memory.len != 80);

    memory = try page_allocator.realloc(memory, 80);
    //Как оказалось resize возвращает правду о размере а не меняет длинру
    //remap тут нет к сожелению
    //relloc работает и переопределяет ращмер. Круто

    try expect(memory.len == 80);
}
//Ну и зачем вызывать какой-то аллокатор чтобы создать массив?
//Аллокаторы выделяют место в куче. Что видно по импорту
//heap = куча
//Это струткутра данных
//Есть :
//Стект Куча .data .bss и .text
//До этого мы работали только со стеком и .text
//(В .text хранятся тела функций)
//А в стеке хранились все константы и переменные которые мы создавали
//В .data и .bss компилятор кидает глобальные переменные и строки
// Также очень боль*ие константные структуры могут отправиться в .data (НАСКОЛЬКО МНЕ ИЗВЕСТНО ИНФОРМАЦИЯ НЕ ТОЧНАЯ)
// в чём суть:
//Куча может изменять размер
//Стек .data .text и .bss имеют фиксированный размер
//Вот зачем куча

//const FBA = @import("std").heap.FixedBufferAllocator;
//_ = FBA;
