const expect = @import("std").testing.expect;

//И таааак
//Switch!
test "general wersoon of switch construction" {
    const flag: i8 = 5;
    const c: bool = switch (flag) {
        -128...-1 => true, //Этот синтаксис встречается только в switch
        //Обозначает он промежуток
        //от...до
        //По поводу =>
        //Оно указывает какой код исполнить при попадании на нашу "ветку"

        //Switch это альтернатива куче if else if else if else
        //Но тут это иначе, тут как я понял switch - таблица переходов
        //Тоесть вот у нас подали жначение( в нашем случае flag
        // И вот если 1 из значениц таблицы (всё что левуу =>
        //Окажется веррым, то мы выполним действие правее =>
        //И произойдет выход из оператора, всё, мы сделали всё что хотели
        1...127 => true,
        0 => false,
    };

    try expect(c);
}

test "better switch" {
    //Тут switch заменяет простейшее if x != 0
    const flag: i8 = 5;
    const is_nill: bool = switch (flag) {
        0 => false,
        else => true,
        //Да, else можно исполтзовать в switch, как и в if
        //он выполнится в последнюю очередь если не сделается ничего другого
    };

    try expect(is_nill);
}

test "someone swith" {
    const is_nill: bool = switch (@as(i8, 10)) {
        -128...0 => false,
        else => true,
    };

    try expect(is_nill);
}
//Такой момент
//В Switch НЕЛЬЗЯ положить:
//float
//указатели
//массивы
//Структуры
//Enum
//Вроде даже Union

//В общем все - что тяжело сравнивать
//Да, float тяжело сравнивать и каждый вызов сравнения float
//приводит к 100+ ассемблерных инструкций!
//Это не значит что сравнивать float - дорого
//Это значит что на деле всё сложнее
